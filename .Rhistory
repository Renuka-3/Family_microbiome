shape = guide_legend("Family"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
# Load ggord for plotting
#if(!require("ggord")){
#    if(!require("devtools")){
#        install.packages("devtools")
#        library("devtools")
#    }
#    install_github("https://github.com/fawda123/ggord/")
#    library("ggord")
#}
#if(!require("ggplot2")){
#    install.packages("ggplot2")
#    library("ggplot2")
#}
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Location"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Location"),
fill = guide_legend("Location"),
group = guide_legend("Location"),
shape = guide_legend("Location"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
plot
rmarkdown::render("RDA.Rmd", output_format="md_document")
library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Phylum,       ~Mean,    ~Median ,   ~Prevalence,       ~Q,   ~t,
"Firmicutes",     73.0,      93.5,     100,           0.0,   0.1,
"Proteobacteria", 23.8,       2.6,      58.3,           0.0,  0.9,
"Actinobacteria", 3.2,       1.2,       59.7,           0.0,  0.0
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
ft <- add_header_row(
ft, values = c("", "",	"",	 "", "(5%)",	"(95%)"),
top = TRUE
)
ft <- add_header_row(
ft,
values = c("Phylum", "Mean relative abundance (%)", "Median (%)", "Prevalence (%)", "Quantiles"), colwidths = c(1, 1, 1, 1, 2),
top = TRUE
)
ft
ft <- theme_booktabs(ft, bold_header = TRUE)
ft <- align(ft, part = "all", i = NULL, j = NULL, align = "center")
# Add custom borders under multi-level headers
# First define define the style of the border line
border_style = officer::fp_border(color="black", width= 1)
ft <- hline(ft, part="header", i = 1, j = c(5), border = border_style)
ft <- italic(ft, i = NULL, j = "Phylum", italic = TRUE, part = "body")
###############
df <- tibble::tribble(
~Phylum,       ~Mean,    ~Median ,   ~Prevalence,       ~Q,   ~t,
"Firmicutes",     73.0,      93.5,     100,           0.0,   0.1,
"Proteobacteria", 23.8,       2.6,      58.3,           0.0,  0.9,
"Actinobacteria", 3.2,       1.2,       59.7,           0.0,  0.0
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
ft <- add_header_row(
ft, values = c("(%)", "(%)",	"(%)",	 "(%)", "(5%)",	"(95%)"),
top = TRUE
)
ft <- add_header_row(
ft,
values = c("Phylum", "Mean relative abundance", "Median", "Prevalence", "Quantiles"), colwidths = c(1, 1, 1, 1, 2),
top = TRUE
)
ft
ft <- theme_booktabs(ft, bold_header = TRUE)
ft <- align(ft, part = "all", i = NULL, j = NULL, align = "center")
# Add custom borders under multi-level headers
# First define define the style of the border line
border_style = officer::fp_border(color="black", width= 1)
ft <- hline(ft, part="header", i = 1, j = c(5), border = border_style)
ft <- italic(ft, i = NULL, j = "Phylum", italic = TRUE, part = "body")
library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Factors,  	~R2,       	~p,
"Diet",    	0.00,     	0.93,
"Age", 	    0.02,     	0.36,
"Gender",  	0.00,	      0.61,
"Location",	0.19,     	0.07,
"Family", 	0.29,     	0.00
)
# Set universal border color as black; otherwise it will will be dark grey.
set_flextable_defaults(border.color = "black")
# Create a flextable based on the dataset above
ft <- flextable(df)
ft
ftt <- set_header_labels(ft, values = c( Factors = "Factor",
R2 = "R2",
p = "p-value"))
ft_1 <- theme_booktabs(ftt, bold_header = TRUE)
#ft_1 <- align(ft_1, i = 1, j = NULL, align = "center", part = "all")
ft5 <- add_footer_lines(ft_1, "Note- The p-value indicates level of significance <0.001∗∗∗, <0.01∗∗, <0.05∗, 0.1 ns")
ft6 <- set_table_properties(ft5, width = 0.5, layout = "autofit")
#ft7 <- fontsize(ft6, i = NULL, j = NULL, size = 9, part = "footer")
#ft8 <- format_flextable(
#  ft7,
#  pbold = NA,
#  psig = 0.05
#)
#ft5 <- footnote(
#  ft_1,i = NULL, j = NULL,
#  value = as_paragraph("Note- The p-value indicates level of significance as <0.001∗∗∗, <0.01∗∗, <0.05∗, 0.1 ns")
#)
#ft5 <- footnote(
#  ft_1,i = 1, j = 1:1,
#  value = as_paragraph("Note- The p-value indicates level of significan")
#)
ft6
library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Family, ~t,	~Members,	~c, ~G1,	~G2, ~G3, ~b, ~Vegetarian,	~Mixed, ~bl, ~Male,  ~Female, ~bla,	~Pune, ~Ahmednagar, ~blan, ~Adult, ~Middleage, ~Elderly,
"A",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   0, 5,   NA,  1, 2, 2,
"B",  NA, 3, NA,  1, 1, 1,  NA, 3, 0, NA,  2,  1,   NA,   0, 3,  NA,   1, 1, 1,
"C", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
​
library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Family, ~t,	~Members,	~c, ~G1,	~G2, ~G3, ~b, ~Vegetarian,	~Mixed, ~bl, ~Male,  ~Female, ~bla,	~Pune, ~Ahmednagar, ~blan, ~Adult, ~Middleage, ~Elderly,
"A",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   0, 5,   NA,  1, 2, 2,
"B",  NA, 3, NA,  1, 1, 1,  NA, 3, 0, NA,  2,  1,   NA,   0, 3,  NA,   1, 1, 1,
"C", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1,
"D", NA, 3, NA,  1, 1, 1, NA, 3, 0, NA,   0,  3,  NA,    0, 3,    NA,  1, 1, 1,
"E",  NA, 4,  NA, 1, 2,  1, NA, 0, 4,  NA,  2, 2,   NA,   0, 4,   NA,  2, 1, 1,
"F",  NA, 5,  NA, 1, 2,  2, NA, 1, 4,  NA,  2, 3,   NA,   5, 0,   NA,  1, 2, 2,
"G", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1,
"H", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   2,  3,  NA,    5, 0,    NA,  2, 2, 1,
"I", NA,  6, NA,  2, 2, 2, NA, 6, 0, NA,   3,  3,  NA,    6, 0,    NA,  2, 2, 2,
"J", NA,  5, NA,  2, 2, 1, NA, 0, 5, NA,   2,  3,  NA,    5, 0,    NA,  2, 2, 1,
"K", NA,  5, NA,  1, 2, 2, NA, 5, 0, NA,   3,  2,  NA,    0, 5,    NA,  2, 1, 2,
"L",  NA, 4,  NA, 1, 2,  1, NA, 4, 0,  NA,  2, 2,   NA,   4, 0,   NA,  1, 2, 1,
"M",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   5, 0,   NA,  1, 2, 2,
"N",  NA, 5,  NA, 1, 2,  2, NA, 3, 2,  NA,  1, 4,   NA,   5, 0,   NA,  1, 2, 2,
"0",  NA, 7,  NA, 4, 2,  1, NA, 7, 0,  NA,  4, 3,   NA,   7, 0,   NA,  4, 2, 1
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
ft <- add_header_row(
ft,
values = c(
"(n=15)", "",	"(n=72)",	 "", "(n=32)",	"(n=28)", "(n=21)", "", "(n=57)",	"(n=15)", "", "(n=33)",  "(n=39)", "",	"(n=52)", "(n=20)", "", "(n=25)", "(n=26)", "(n=21)"),
top = TRUE
)
ft <- add_header_row(
ft,
values = c(
"",	"",	"", "", "G1",	"G2", "G3", "", "Vegetarian",	"Mixed", "", "Male",  "Female", "",	"Pune", "Ahmednagar", "", "Adult", "Middle age", "Elderly"),
top = TRUE
)
# Add the second row of the multilevel header
ft <- add_header_row(ft, values = c("Family", "", "Members", "", "Generation", "", "Diet", "", "Sex", "", "Location", "", "Age"),
colwidths = c(1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 2, 1, 3), top = TRUE)
ft
ft <- theme_booktabs(ft, bold_header = TRUE)
ft <- align(ft, part = "all", i = NULL, j = NULL, align = "center")
# Add custom borders under multi-level headers
# First define define the style of the border line
border_style = officer::fp_border(color="black", width= 1)
ft <- hline(ft, part="header", i = 2, j = c(5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
ft <- hline(ft, part="header", i = 1, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
########final
ft <- padding(ft, padding.top = 2, part = "body")
ft <- fontsize(ft, size = 11, part = "header")
ft <- hline(ft, part="header", i = 1, j = c(5, 9, 12, 15, 18), border = border_style)
##ft <- hline(ft, part="header", i = 2, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
#ft <- hline(ft, part="header", i = 2, j = c(1:3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
#ft <- hline(ft, part="header", i = 1, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
ft
rmarkdown::render("Intergeneration_analysis.Rmd", output_format="md_document")
rmarkdown::render("location.Rmd", output_format="md_document")
rmarkdown::render("Tables.Rmd", output_format="md_document")
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_tax <- getTopTaxa(tse_Phylum,top =3, detection = 0.1/100, prevalence= 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_tax) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
###################################################
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
#gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 3, assay_name = "relabundance")
#phylum_renamed <- lapply(rowData(tse)$Phylum,
#                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
library(dplyr)
library(ComplexHeatmap)
sorted_coldata <- as.data.frame(colData(tse_Phylum)) %>%
arrange(Location)
sorted_assay <- assay(tse_Phylum, "clr_z")[ , rownames(sorted_coldata)]
#sorted_assay <- assay(tse_Phylum, "clr_z")[ , sorted_coldata$Location]
ren <- HeatmapAnnotation(
Location = sorted_coldata$Location)
sub_assay <- sorted_assay[top_taxa, ]
hm <- Heatmap(sub_assay,
name = "clr-z",
column_split = sorted_coldata$Location,
column_gap = unit(2, "mm"),
border = TRUE,
column_title = "",
row_names_side = "left",
top_annotation = ren,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_names = FALSE)
gridExtra::grid.arrange(l, hm, nrow = 1)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 4, assay_name = "relabundance")
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
maxval <- round(max(abs(df$clr_z)))
limits <- c(-6, 6)
breaks <- c(-6, -3, 0, 3, 6)
colours <- c("darkblue", "blue", "white", "red", "darkred")
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks =c(-6, -3, 0, 3, 6), limits= c(-6, 6), colours = colours) +
theme(text = element_text(size=15),
#axis.text.x = element_text(angle=45, hjust=1),
axis.text.x=element_blank(),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Phylum")
print(c)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top =4, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phylum_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 4, assay_name = "relabundance")
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
maxval <- round(max(abs(df$clr_z)))
limits <- c(-6, 6)
breaks <- c(-6, -3, 0, 3, 6)
colours <- c("darkblue", "blue", "white", "red", "darkred")
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks =c(-6, -3, 0, 3, 6), limits= c(-6, 6), colours = colours) +
theme(text = element_text(size=15),
#axis.text.x = element_text(angle=45, hjust=1),
axis.text.x=element_blank(),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Phylum")
print(c)
