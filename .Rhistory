geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance")
print(p4)
P4
library("mia")
library("mia")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(fam_tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
library("mia")
#head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
print(g)
print(g)
library(dplyr)
library(dplyr)
COMPS <- combn(LETTERS[1:15],2, simplify = FALSE)
res <- lapply(COMPS, function(comp) {
t.test(df[df$Family==comp[1],"shannon"],df[df$Family==comp[2],"shannon"])$p.value
})
f <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = COMPS[res < 0.05],
map_signif_level = TRUE, na.rm = TRUE,
step_increase=0.25)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(f)
print(f)
library("mia")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(fam_tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
?ggplot
?geom_dotplot
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Samples, y = shannon)) +    ## Shannon Diversity family-wise
geom_dotplot(color = Family) + geom_jitter(width = 0.05)
g1 <- ggplot(df, aes(x = Samples, y = shannon)) +    ## Shannon Diversity family-wise
geom_dotplot(color = "Family") + geom_jitter(width = 0.05)
print(g1)
dim(df)
colData(df)
head(df)
g1 <- ggplot(df, aes(x = Sample, y = shannon)) +    ## Shannon Diversity family-wise
geom_dotplot(color = "Family") + geom_jitter(width = 0.05)
print(g1)
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = "Family")) +    ## Shannon Diversity family-wise
geom_dotplot() + geom_jitter(width = 0.05)
print(g1)
print(g1)
df <- as.data.frame(colData(tse))
g <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = "Family", map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(g)
print(g)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = "Family")) +    ## Shannon Diversity family-wise
geom_dotplot() + geom_jitter(width = 0.05)
print(g1)
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_dotplot() + geom_jitter(width = 0.05)
print(g1)
print(g1)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_dotplot() #+ geom_jitter(width = 0.05)
print(g1)
print(g1)
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_jitter(width = 0.05) #+geom_dotplot()
print(g1)
print(g1)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse
colData(tse)
j<- tse[ , tse$Family = = "A"]
j<- tse[ , tse$Family == "A"]
j
k <- j[ , samples(1:5,2)]
k <- j[ , sample(1:5, 2)]
k
sample(1:5, 2)
sample(1:5, 2)
sample(1:5, 2)
k
k <- runMDS(k, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
library(vegan)
k <- runMDS(k, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
library(mia)
k <- runMDS(k, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
library(scater)
k <- runMDS(k, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
k <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
k <- j[ , sample(1:5, 3)]
k <- runMDS(k, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
tse <- transformCounts(fam_tse, method = "relabundance")
####
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
tse$bray
assay(tse, "bray")
colData(tse)
calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
re <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
re$eig
coeff(re)
attr(re, "eig")
Ren <- attr(re, "eig")
dim(Ren)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
dim(e)
library(mia)
library(vegan)
library(scater)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
#tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
re <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
View(dx)
ran <- sample(1:5, 2)
ran
ran
ran
ran
ran
ran <- sample(1:5, 2)
ran
ran <- sample(1:5, 2)
ran
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("inputdata/processed/tables_new/OTU_table.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
counts <- as.matrix(counts) # Count data must be a matrix
# Read taxonomic table
tax <- as.data.frame(read_excel("inputdata/processed/tables_new/Taxa_table.xlsx"))   # Taxonomy table (to rowData)
row.names(tax) <- tax$OTUU
tax <- tax %>% select (-OTUU)
# Read sample metadata
sampledata <- as.data.frame(read_excel("inputdata/processed/tables_new/Metadata.xlsx"))   # Sample data (to colData)
row.names(sampledata) <- sampledata$Sample
# Convert data into TreeSummarizedExperiment object
fam_tse <- TreeSummarizedExperiment(assays = SimpleList(counts=counts),
colData = sampledata,
rowData = tax)
fam_tse
names(colData(fam_tse))
names(colData(fam_tse$Sample))
fam_tse$Sample
View(metadata(fam_tse))
colData(fam_tse)
print(colData(fam_tse))
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("inputdata/processed/tables_new/OTU_table.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
counts <- as.matrix(counts) # Count data must be a matrix
# Read taxonomic table
tax <- as.data.frame(read_excel("inputdata/processed/tables_new/Taxa_table.xlsx"))   # Taxonomy table (to rowData)
row.names(tax) <- tax$OTUU
tax <- tax %>% select (-OTUU)
# Read sample metadata
sampledata <- as.data.frame(read_excel("inputdata/processed/tables_new/Metadata.xlsx"))   # Sample data (to colData)
row.names(sampledata) <- sampledata$Sample
# Convert data into TreeSummarizedExperiment object
fam_tse <- TreeSummarizedExperiment(assays = SimpleList(counts=counts),
colData = sampledata,
rowData = tax)
# Save the data object
saveRDS(fam_tse, file="inputdata/processed/TSE/fam_tse.rds")
save(fam_tse, file="inputdata/processed/TSE/fam_tse.rda")
fam_tse
colData(fam_tse)
library("mia")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(fam_tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
#head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = "Family", map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(g)
library(dplyr)
COMPS <- combn(LETTERS[1:15],2, simplify = FALSE)
res <- lapply(COMPS, function(comp) {
t.test(df[df$Family==comp[1],"shannon"],df[df$Family==comp[2],"shannon"])$p.value
})
f <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = COMPS[res < 0.05],
map_signif_level = TRUE, na.rm = TRUE,
step_increase=0.25)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(f)
b <- ggplot(df, aes(x = Location, y = shannon)) +    ## Shannon Diversity for Geographical_location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Pune", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
c <- ggplot(df, aes(x = Age, y = shannon)) +    ## Shannon Diversity for age groups
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Adult", "Middle_age"), c("Adult","Elderly"), c("Middle_age", "Elderly")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + scale_x_discrete(limits = c("Adult","Middle_age", "Elderly"),
labels = c("Adult", "Middle age", "Elderly")) +
theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
d <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Mixed", "Veg")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
e <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Female", "Male")), map_signif_level = FALSE, na.rm = FALSE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
library(gridExtra)
gridExtra::grid.arrange(b, c, d, e, nrow = 1)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_jitter(width = 0.05) #+geom_dotplot()
print(g1)
+
+ ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
library("mia")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(fam_tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
#head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = "Family", map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(g)
library(dplyr)
COMPS <- combn(LETTERS[1:15],2, simplify = FALSE)
res <- lapply(COMPS, function(comp) {
t.test(df[df$Family==comp[1],"shannon"],df[df$Family==comp[2],"shannon"])$p.value
})
f <- ggplot(df, aes(x = Family, y = shannon)) +    ## Shannon Diversity family-wise
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = COMPS[res < 0.05],
map_signif_level = TRUE, na.rm = TRUE,
step_increase=0.25)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(f)
print(f)
b <- ggplot(df, aes(x = Location, y = shannon)) +    ## Shannon Diversity for Geographical_location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Pune", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
c <- ggplot(df, aes(x = Age, y = shannon)) +    ## Shannon Diversity for age groups
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Adult", "Middle_age"), c("Adult","Elderly"), c("Middle_age", "Elderly")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + scale_x_discrete(limits = c("Adult","Middle_age", "Elderly"),
labels = c("Adult", "Middle age", "Elderly")) +
theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
d <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Mixed", "Veg")), map_signif_level = FALSE, na.rm = TRUE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
e <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
geom_signif(comparisons = list(c("Female", "Male")), map_signif_level = FALSE, na.rm = FALSE)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
library(gridExtra)
gridExtra::grid.arrange(b, c, d, e, nrow = 1)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_jitter(width = 0.05) #+geom_dotplot()
print(g1)
+
+ ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(g1)
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_jitter(width = 0.05) #+geom_dotplot()
g1 <- ggplot(df, aes(x = Sample, y = shannon, color = Family)) +    ## Shannon Diversity family-wise
geom_jitter(width = 0.05)  + ylab("Shannon") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(g1)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Add group information
colData(tse)$Group <- colData(tse)$Sample=="Location"
# Quantify dissimilarities in the original feature space
library(vegan)
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
library(ggplot2)
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
library(scater)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Location") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(fam_tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for Diet
p1 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Diet", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p1 <- p1 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Diet") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p1)
# Create ggplot object for Age
p2 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Age", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p2 <- p2 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Age") +
theme(legend.position = 'bottom', legend.text=element_text(size=6)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p2)
# Create ggplot object for Gender
library(ggplot2)
library(ggrepel)
p3 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Gender", point_size= 2.5, point_alpha= 0.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p3 <- p3 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Gender") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(ggplot2)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
library(mia)
library(vegan)
library(scater)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
Sab_tse <- tse[, str_detect(tse$Sample, "2")| str_detect(tse$Sample, "3")]
library(dplyr)
Sab_tse <- tse[, str_detect(tse$Sample, "2")| str_detect(tse$Sample, "3")]
beta_compare <- function(family, dx) {
endn <- sum(str_detect(rownames(dx), family))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(family, my_rnd[[1]]), paste0(family, my_rnd[[2]])]
return(my_beta)
}
lapply(c("A", "B", "C"), beta_compare, dx)
rmarkdown::render("tse_alpha.Rmd", output_format = "md_document")
library(tidyverse)
beta_compare <- function(family, dx) {
endn <- sum(str_detect(rownames(dx), family))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(family, my_rnd[[1]]), paste0(family, my_rnd[[2]])]
return(my_beta)
}
lapply(c("A", "B", "C"), beta_compare, dx)
beta_compare <- function(family, dx) {
endn <- sum(str_detect(rownames(dx), family))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(family, my_rnd[[1]]), paste0(family, my_rnd[[2]])]
return(my_beta)
}
lapply(c("A", "B", "C"), beta_compare, dx)
beta_compare <- function(family, dx) {
endn <- sum(str_detect(rownames(dx), family))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(family, ran[[1]]), paste0(family, ran[[2]])]
return(my_beta)
}
lapply(c("A", "B", "C"), beta_compare, dx)
ran <- sample(1:5, 2)
dx[paste0("A", ran[[2]]), paste0("A", ran[[3]])]
dx[paste0("A", ran[[1]]), paste0("A", ran[[3]])]
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
d0 <- assay(tse, "relabundance")
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[3]])]
dx[paste0("A", ran[[2]]), paste0("A", ran[[3]])]
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
beta_compare <- function(family, dx) {
endn <- sum(str_detect(rownames(dx), family))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(family, ran[[1]]), paste0(family, ran[[2]])]
return(my_beta)
}
lapply(c("A", "B", "C"), beta_compare, dx)
