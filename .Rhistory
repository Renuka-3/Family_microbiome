library(ggplot2)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Add group information
colData(tse)$Group <- colData(tse)$Sample=="Location"
# Quantify dissimilarities in the original feature space
library(vegan)
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
library(ggplot2)
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
library(scater)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location")
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Location") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(fam_tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for Diet
p1 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Diet")
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p1 <- p1 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Diet") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p1)
# Create ggplot object for Age
p2 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Age", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p2 <- p2 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Age") +
theme(legend.position = 'bottom', legend.text=element_text(size=7)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p2)
# Create ggplot object for Gender
library(ggplot2)
library(ggrepel)
p3 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Gender", point_size= 2.5, point_alpha= 0.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p3 <- p3 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Gender") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(ggplot2)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Add group information
colData(tse)$Group <- colData(tse)$Sample=="Location"
# Quantify dissimilarities in the original feature space
library(vegan)
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
library(ggplot2)
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
library(scater)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location")
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Location") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(fam_tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for Diet
p1 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Diet")
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p1 <- p1 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Diet") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p1)
# Create ggplot object for Age
p2 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Age", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p2 <- p2 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Age") +
theme(legend.position = 'bottom', legend.text=element_text(size=6)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p2)
# Create ggplot object for Gender
library(ggplot2)
library(ggrepel)
p3 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Gender", point_size= 2.5, point_alpha= 0.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p3 <- p3 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Gender") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(ggplot2)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
rmarkdown::render("tse_beta.Rmd", output_format = "md_document")
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Add group information
colData(tse)$Group <- colData(tse)$Sample=="Location"
# Quantify dissimilarities in the original feature space
library(vegan)
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
library(ggplot2)
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
library(scater)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Location") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Bray-Curtis is usually applied to relative abundances
tse <- transformSamples(fam_tse, method = "relabundance")
# Perform PCoA
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for Diet
p1 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Diet", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p1 <- p1 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Diet") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p1)
# Create ggplot object for Age
p2 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Age", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p2 <- p2 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Age") +
theme(legend.position = 'bottom', legend.text=element_text(size=6)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p2)
# Create ggplot object for Gender
library(ggplot2)
library(ggrepel)
p3 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Gender", point_size= 2.5, point_alpha= 0.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p3 <- p3 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Gender") +
theme(legend.position = 'bottom', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(ggplot2)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[l>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
rmarkdown::render("tse_beta.Rmd", output_format="md_document")
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 5, assay_name = "relabundance")
# Renaming the "Phylum" rank to keep only top taxa and the rest to "Other"
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(phylum_renamed)
# Visualizing the composition barplot, with samples order by "Bacteroidetes"
a <- plotAbundance(tse, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
print(a)
print(a)
## Genus level
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
# Getting top taxa on a genus level
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top = 5, assay_name = "relabundance")
# Renaming the "genus" rank to keep only top taxa and the rest to "Other"
genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(genus_renamed)
# Visualizing the composition barplot, with samples order by "Bacteroidetes"
b <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
order_rank_by="abund",
order_sample_by = "Staphylococcus")
print(b)
print(b)
library(ggplot2)
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
# Melt the assay for plotting purposes
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
# Determines the scaling of colours
maxval <- round(max(abs(df$clr_z)))
limits <- c(-maxval, maxval)
breaks <- seq(from = min(limits), to = max(limits), by = 0.5)
colours <- c("darkblue", "blue", "white", "red", "darkred")
# Creates a ggplot object
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks = breaks, limits = limits, colours = colours) +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Taxa")
print(c)
print(c)
# Creates a ggplot object
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks = breaks, limits = limits, colours = colours) +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=45, hjust=1),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Taxa")
print(c)
print(c)
# Creates a ggplot object
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks = breaks, limits = limits, colours = colours) +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Taxa")
print(c)
print(c)
## Core abundance
tse <- transformSamples(tse, method="relabundance")
molten_tse <- meltAssay(tse,
add_row_data = TRUE,
add_col_data = TRUE,
assay_name = "relabundance")
p3 <- ggplot(molten_tse, aes(x = phylum, y = relabundance)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance")
print(p3)
p3 <- ggplot(molten_tse, aes(x = Phylum, y = relabundance)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance")
print(p3)
##leo
tse <- transformCounts(tse, method = "relabundance")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"genus") <- agglomerateByRank(tse, "genus")
##leo
tse <- transformCounts(tse, method = "relabundance")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
head(getPrevalence(tse, detection = 0.1, sort = TRUE, assay_name = "counts",
as_relative = FALSE))
altExp(tse, "prevalent_genera") <- subsetByPrevalentTaxa(tse,
rank = "Genus",
assay_name= "counts",
detection = 0.1/100,
prevalence = 20/100,
as_relative = TRUE)
molten_tse2 <- meltAssay(tse,
add_row_data = TRUE,
add_col_data = TRUE,
assay_name = "counts")
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance")
print(p4)
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw()
print(p4)
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 18), axis.title = element_text(size = 20))
print(p4)
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw() + theme(text = element_text(size = 10), axis.text = element_text(size = 15), axis.title = element_text(size = 20))
print(p4)
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 10), axis.title = element_text(size = 15))
print(p4)
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 15), axis.title = element_text(size = 15))
print(p4)
