permutations = 999)
head(permanova)
#library(scater)
tse <- transformSamples(tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
subset_tse <- tse[ , tse$Family %in% "A"]
# Create ggplot object for location
p <- plotReducedDim(subset_tse, "PCoA_BC", colour_by = "Sample", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(subset_tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family A") +
theme(legend.position = 'none', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#library(scater)
tse <- transformSamples(tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
subset_tse <- tse[ , tse$Family %in% "A"]
# Create ggplot object for location
p <- plotReducedDim(subset_tse, "PCoA_BC", colour_by = "Sample", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(subset_tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Family A") +
theme(legend.position = 'none', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "C. Pune")
#print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE) + labs(x = "Families", y = "", title = "C. Ahmednagar") + theme(axis.text.y=element_blank())
#print(b)
c <- b+a
print(c)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 3, assay_name = "relabundance")
#phylum_renamed <- lapply(rowData(tse)$Phylum,
#                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
library(dplyr)
library(ComplexHeatmap)
sorted_coldata <- as.data.frame(colData(tse_Phylum)) %>%
arrange(Location)
sorted_assay <- assay(tse_Phylum, "clr_z")[ , rownames(sorted_coldata)]
#sorted_assay <- assay(tse_Phylum, "clr_z")[ , sorted_coldata$Location]
ren <- HeatmapAnnotation(
Location = sorted_coldata$Location)
sub_assay <- sorted_assay[top_taxa, ]
hm <- Heatmap(sub_assay,
name = "clr-z",
column_split = sorted_coldata$Location,
column_gap = unit(2, "mm"),
border = TRUE,
column_title = "",
row_names_side = "left",
top_annotation = ren,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_names = FALSE)
print(hm)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phylum_renamed)
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "C. Pune")
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "C. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
rmarkdown::render("supplimentoryn.Rmd", output_format="md_document")
rmarkdown::render("supplimentory.Rmd", output_format="md_document")
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Family", "Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Family"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Family"),
fill = guide_legend("Family"),
group = guide_legend("Family"),
shape = guide_legend("Family"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
plot
library(mia)
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
# Load ggord for plotting
#if(!require("ggord")){
#    if(!require("devtools")){
#        install.packages("devtools")
#        library("devtools")
#    }
#    install_github("https://github.com/fawda123/ggord/")
#    library("ggord")
#}
#if(!require("ggplot2")){
#    install.packages("ggplot2")
#    library("ggplot2")
#}
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Location"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Location"),
fill = guide_legend("Location"),
group = guide_legend("Location"),
shape = guide_legend("Location"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
library(knitr)
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
# Load ggord for plotting
#if(!require("ggord")){
#    if(!require("devtools")){
#        install.packages("devtools")
#        library("devtools")
#    }
#    install_github("https://github.com/fawda123/ggord/")
#    library("ggord")
#}
#if(!require("ggplot2")){
#    install.packages("ggplot2")
#    library("ggplot2")
#}
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Location"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Location"),
fill = guide_legend("Location"),
group = guide_legend("Location"),
shape = guide_legend("Location"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
