my_beta <- dx[first_member, second_member]
return(list(my_beta,first_member, second_member))
}
set.seed(2345)
beta_values <- c()
families1 <- c()
families2 <- c()
for (first_family in unique(tse$Family)){
for (second_family in unique(tse$Family)){
tmp_res <- beta_compare(c(first_family, second_family ), dx)
beta_values <- c(beta_values, tmp_res[[1]])
families1 <- c(families1, tmp_res[[2]])
families2 <- c(families2, tmp_res[[3]])
}
}
j <- data.frame(BetaComparison = beta_values,
FirstFamily = families1,
SecondFamily = families2)
j<- j %>% mutate(Within = substr(FirstFamily, 1,1) == substr(SecondFamily, 1,1))
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter() +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = TRUE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
## two Members of same family
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
###########set.seed(1234)
beta_compare <- function(families, dx) {
if (families[[1]] == families[[2]]) {
endn <- sum(str_detect(rownames(dx), families[[1]]))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(families[[1]], my_rnd[[1]]), paste0(families[[2]], my_rnd[[2]])]
first_member <- paste0(families[[1]], my_rnd[[1]])
second_member <- paste0(families[[2]], my_rnd[[2]])
} else {
endn1 <- sum(str_detect(rownames(dx), families[[1]]))
endn2 <- sum(str_detect(rownames(dx), families[[2]]))
my_rnd1 <- sample(1:endn1, 1)
my_rnd2 <- sample(1:endn2, 1)
first_member <- paste0(families[[1]], my_rnd1[[1]])
second_member <- paste0(families[[2]], my_rnd2[[1]])
}
my_beta <- dx[first_member, second_member]
return(list(my_beta,first_member, second_member))
}
set.seed(2345)
beta_values <- c()
families1 <- c()
families2 <- c()
for (first_family in unique(tse$Family)){
for (second_family in unique(tse$Family)){
tmp_res <- beta_compare(c(first_family, second_family ), dx)
beta_values <- c(beta_values, tmp_res[[1]])
families1 <- c(families1, tmp_res[[2]])
families2 <- c(families2, tmp_res[[3]])
}
}
j <- data.frame(BetaComparison = beta_values,
FirstFamily = families1,
SecondFamily = families2)
j<- j %>% mutate(Within = substr(FirstFamily, 1,1) == substr(SecondFamily, 1,1))
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter() +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = TRUE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
## two Members of same family
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
###########set.seed(1234)
beta_compare <- function(families, dx) {
if (families[[1]] == families[[2]]) {
endn <- sum(str_detect(rownames(dx), families[[1]]))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(families[[1]], my_rnd[[1]]), paste0(families[[2]], my_rnd[[2]])]
first_member <- paste0(families[[1]], my_rnd[[1]])
second_member <- paste0(families[[2]], my_rnd[[2]])
} else {
endn1 <- sum(str_detect(rownames(dx), families[[1]]))
endn2 <- sum(str_detect(rownames(dx), families[[2]]))
my_rnd1 <- sample(1:endn1, 1)
my_rnd2 <- sample(1:endn2, 1)
first_member <- paste0(families[[1]], my_rnd1[[1]])
second_member <- paste0(families[[2]], my_rnd2[[1]])
}
my_beta <- dx[first_member, second_member]
return(list(my_beta,first_member, second_member))
}
set.seed(2345)
beta_values <- c()
families1 <- c()
families2 <- c()
for (first_family in unique(tse$Family)){
for (second_family in unique(tse$Family)){
tmp_res <- beta_compare(c(first_family, second_family ), dx)
beta_values <- c(beta_values, tmp_res[[1]])
families1 <- c(families1, tmp_res[[2]])
families2 <- c(families2, tmp_res[[3]])
}
}
j <- data.frame(BetaComparison = beta_values,
FirstFamily = families1,
SecondFamily = families2)
j<- j %>% mutate(Within = substr(FirstFamily, 1,1) == substr(SecondFamily, 1,1))
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter() +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
View(j)
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.2, height=0.2) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
print(H1)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.05) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.1) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.08) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.05) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(miaViz)
library(miaViz)
library(mia)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
## two Members of same family
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
###########set.seed(1234)
beta_compare <- function(families, dx) {
if (families[[1]] == families[[2]]) {
endn <- sum(str_detect(rownames(dx), families[[1]]))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(families[[1]], my_rnd[[1]]), paste0(families[[2]], my_rnd[[2]])]
first_member <- paste0(families[[1]], my_rnd[[1]])
second_member <- paste0(families[[2]], my_rnd[[2]])
} else {
endn1 <- sum(str_detect(rownames(dx), families[[1]]))
endn2 <- sum(str_detect(rownames(dx), families[[2]]))
my_rnd1 <- sample(1:endn1, 1)
my_rnd2 <- sample(1:endn2, 1)
first_member <- paste0(families[[1]], my_rnd1[[1]])
second_member <- paste0(families[[2]], my_rnd2[[1]])
}
my_beta <- dx[first_member, second_member]
return(list(my_beta,first_member, second_member))
}
set.seed(2345)
beta_values <- c()
families1 <- c()
families2 <- c()
for (first_family in unique(tse$Family)){
for (second_family in unique(tse$Family)){
tmp_res <- beta_compare(c(first_family, second_family ), dx)
beta_values <- c(beta_values, tmp_res[[1]])
families1 <- c(families1, tmp_res[[2]])
families2 <- c(families2, tmp_res[[3]])
}
}
j <- data.frame(BetaComparison = beta_values,
FirstFamily = families1,
SecondFamily = families2)
j<- j %>% mutate(Within = substr(FirstFamily, 1,1) == substr(SecondFamily, 1,1))
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.05) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
## two Members of same family
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "bray", exprs_values = "relabundance")
##tse <- calculateMDS(tse, method= "bray", FUN = vegan::vegdist,exprs_values = "relabundance")
## two Members of same family
d0 <- assay(tse, "relabundance")
dx <- as.matrix(vegdist(t(d0), method="bray"))
ran <- sample(1:5, 2)
##dx[paste0("A", ran[[1]]), paste0("A", ran[[2]])]
###########set.seed(1234)
beta_compare <- function(families, dx) {
if (families[[1]] == families[[2]]) {
endn <- sum(str_detect(rownames(dx), families[[1]]))
my_rnd <- sample(1:endn, 2)
my_beta <- dx[paste0(families[[1]], my_rnd[[1]]), paste0(families[[2]], my_rnd[[2]])]
first_member <- paste0(families[[1]], my_rnd[[1]])
second_member <- paste0(families[[2]], my_rnd[[2]])
} else {
endn1 <- sum(str_detect(rownames(dx), families[[1]]))
endn2 <- sum(str_detect(rownames(dx), families[[2]]))
my_rnd1 <- sample(1:endn1, 1)
my_rnd2 <- sample(1:endn2, 1)
first_member <- paste0(families[[1]], my_rnd1[[1]])
second_member <- paste0(families[[2]], my_rnd2[[1]])
}
my_beta <- dx[first_member, second_member]
return(list(my_beta,first_member, second_member))
}
set.seed(2345)
beta_values <- c()
families1 <- c()
families2 <- c()
for (first_family in unique(tse$Family)){
for (second_family in unique(tse$Family)){
tmp_res <- beta_compare(c(first_family, second_family ), dx)
beta_values <- c(beta_values, tmp_res[[1]])
families1 <- c(families1, tmp_res[[2]])
families2 <- c(families2, tmp_res[[3]])
}
}
j <- data.frame(BetaComparison = beta_values,
FirstFamily = families1,
SecondFamily = families2)
j<- j %>% mutate(Within = substr(FirstFamily, 1,1) == substr(SecondFamily, 1,1))
library(ggsignif)
H <- ggplot(j, aes(x = Within, y = BetaComparison)) +
geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.05) +geom_signif(comparisons = list(c("FALSE", "TRUE")), map_signif_level = FALSE) + theme(text = element_text(size = 20)) + labs(x = "Members", y= "Dissimilarity index")
H1<- H + scale_x_discrete(labels=c("TRUE" = "Within family", "FALSE" = "Between family"))
print(H1)
rmarkdown::render("RF.Rmd", output_format = "md_document")
dim(tse_Rfam)
library(mia)
prevalence
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 5, assay_name = "relabundance")
# Renaming the "Phylum" rank to keep only top taxa and the rest to "Other"
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(phylum_renamed)
# Visualizing the composition barplot, with samples order by "Bacteroidetes"
a <- plotAbundance(tse, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
print(a)
print(a)
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
tse[, 1]
assay(tse, 1)
assay(tse, 1)[, 1]
assay(tse, 1)[, 1]
sum(assay(tse,1)[, 1:5])
sum(assay(tse,1)[, 1:5])
sum(assay(tse, "relabundance")[,1])
a1 <- plotAbundance(merged1, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
library(stringr)
str_detect()
a1 <- plotAbundance(Sab_tse, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
a1
# Renaming the "Phylum" rank to keep only top taxa and the rest to "Other"
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
# Getting top taxa on a Phylum level
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 5, assay_name = "relabundance")
# Renaming the "Phylum" rank to keep only top taxa and the rest to "Other"
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(phylum_renamed)
# Visualizing the composition barplot, with samples order by "Bacteroidetes"
a <- plotAbundance(tse, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
print(a)
a
a1 <- plotAbundance(merged1, assay_name="relabundance", rank = "Phylum",
order_rank_by="abund",
order_sample_by = "Firmicutes")
a1
## Genus level
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
# Getting top taxa on a genus level
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top = 5, assay_name = "relabundance")
top_taxa <- getTopTaxa(tse_Genus,top = 5, assay_name = "relabundance")
# Renaming the "genus" rank to keep only top taxa and the rest to "Other"
genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(genus_renamed)
# Visualizing the composition barplot, with samples order by "Bacteroidetes"
b <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
order_rank_by="abund",
order_sample_by = "Staphylococcus")
print(b)
b
library(ggplot2)
# Melt the assay for plotting purposes
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
limits <- c(-maxval, maxval)
breaks <- seq(from = min(limits), to = max(limits), by = 0.5)
colours <- c("darkblue", "blue", "white", "red", "darkred")
# Creates a ggplot object
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks = breaks, limits = limits, colours = colours) +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=45, hjust=1),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Taxa")
print(c)
## Core abundance
tse <- transformSamples(tse, method="relabundance")
molten_tse <- meltAssay(tse,
add_row_data = TRUE,
add_col_data = TRUE,
assay_name = "relabundance")
p3 <- ggplot(molten_tse, aes(x = Phylum, y = relabundance)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance")
print(p3)
p3
##figure 2
tse <- transformCounts(tse, method = "relabundance")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
head(getPrevalence(tse, detection = 0.1, sort = TRUE, assay_name = "counts",
as_relative = FALSE))
altExp(tse, "prevalent_genera") <- subsetByPrevalentTaxa(tse,
rank = "Genus",
assay_name= "counts",
detection = 0.1/100,
prevalence = 20/100,
as_relative = TRUE)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
rowData(altExp(tse, "Genus"))$Genus_prevalence <- getPrevalence(altExp(tse, "Genus"), detection = 1/100, sort = FALSE,
assay_name = "counts", as_relative = TRUE)
p1 <- plotRowData(altExp(tse, "Genus"), "Genus_prevalence", colour_by = "Genus") +
labs(title = "Sample prevelence at genus level")
p2 <- p + scale_color_brewer(palette = "Dark2")
library(patchwork)
print(p1 + p2)
p1 <- plotRowData(altExp(tse, "Genus"), "Genus_prevalence", colour_by = "Genus") +
labs(title = "Sample prevelence at genus level")
p2 <- p1 + scale_color_brewer(palette = "Dark2")
library(patchwork)
print(p1 + p2)
library(miaViz)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
##figure 2
tse <- transformCounts(tse, method = "relabundance")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
head(getPrevalence(tse, detection = 0.1, sort = TRUE, assay_name = "counts",
as_relative = FALSE))
altExp(tse, "prevalent_genera") <- subsetByPrevalentTaxa(tse,
rank = "Genus",
assay_name= "counts",
detection = 0.1/100,
prevalence = 20/100,
as_relative = TRUE)
molten_tse2 <- meltAssay(tse,
add_row_data = TRUE,
add_col_data = TRUE,
assay_name = "counts")
p4 <- ggplot(molten_tse2, aes(x = Genus, y = counts)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
scale_y_continuous(label = scales::percent) +
#scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = '', title = "Core abundance") + theme_bw() + theme(text = element_text(size = 20), axis.text = element_text(size = 15), axis.title = element_text(size = 15))
print(p4)
p4
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
tse <- transformCounts(tse, method = "relabundance")
#tse <- transformSamples(tse, method="relabundance")
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
rowData(altExp(tse, "Genus"))$Genus_prevalence <- getPrevalence(altExp(tse, "Genus"), detection = 0.1/100, prevalence = 20/100, sort = FALSE,assay_name = "counts", as_relative = TRUE)
rowData(altExp(tse, "Genus"))$Genus_prevalence
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Computing relative abundance
tse <- relAbundanceCounts(fam_tse)
tse <- transformCounts(tse, method = "relabundance")
head(getPrevalence(tse, detection = 1/100, sort = TRUE, as_relative = TRUE))
altExp(tse,"Genus") <- agglomerateByRank(tse, "Genus")
head(getPrevalence(altExp(tse,"Genus"), detection = 1/100, sort = TRUE, as_relative = TRUE))
tse <- transformCounts(tse, method = "relabundance")
altExp(tse,"Phylum") <- agglomerateByRank(tse, "Phylum")
head(getPrevalence(altExp(tse,"Phylum"), detection = 1/100, sort = TRUE, as_relative = TRUE))
head(getPrevalence(altExp(tse,"Phylum"), detection = 0.1/100, sort = TRUE, as_relative = TRUE))
?estimateDivergence
## PERMANOVA analysis
library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
# We choose 99 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
