geom_jitter(position=position_jitter(0.1), cex=2.0) +
theme(legend.position="none") +
labs(y = "Shannon index", x = "Location") #+ title = paste0 "Kruskal test p="", round(pv, 2))
#print(p5)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
#A <- alpha(phy
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
##ppv <- kruskal.test(data = df, index ~ factor(Diet))$p.value
p5 <- ggplot(df, aes(x = Location, y = index, color = Location)) +
geom_jitter(position=position_jitter(0.1), cex=2.0) +
theme(legend.position="none") +
labs(y = "Shannon index", x = "Location") #+ title = paste0 "Kruskal test p="", round(pv, 2))
#print(p5)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(vegan)
library(ggpubr)
library(gridExtra)
theme_set(theme_bw(20))
# Was created with: source("create_phyloseq.R")
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
A <- alpha(phy)
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
#pv <- kruskal.test(data = df, index ~ factor(Family))$p.value
p1 <- ggplot(df, aes(x = Family, y = index, color = Family)) + geom_jitter(position=position_jitter(0.1), cex=2.0) +                     theme(legend.position="none") +
labs(y = "Shannon index", x = "Family") #title = paste0("Kruskal test p=", round(pv, 2)))
#print(p1)
#A <- alpha(phy)
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
##ppv <- kruskal.test(data = df, index ~ factor(Diet))$p.value
p2 <- ggplot(df, aes(x = Diet, y = index, color = Diet)) + geom_jitter(position=position_jitter(0.1), cex=2.0) +                     theme(legend.position="none") + #theme(scale_x_discrete(limits = c("Mixed", "Veg"),labels = c("Mixed", "Vegetarian"))) +
labs(y = "Shannon index", x = "Diet") #+ title = paste0 "Kruskal test p="", round(pv, 2))
#print(p2)
#A <- alpha(phy)
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
#pv <- kruskal.test(data = df, index ~ factor(Family))$p.value
p3 <- ggplot(df, aes(x = Age, y = index, color = Age)) + geom_jitter(position=position_jitter(0.1), cex=2.0) +                     theme(legend.position="none") +
theme(axis.title.x = element_text()) + #scale_x_discrete(limits = c("Adult", "Elderly", "Middle_age"), labels = c("Adult", "Elderly", "Middle age")) +
labs(y = "Shannon index", x = "Age") #title = paste0("Kruskal test p=", round(pv, 2)))
#print(p3)
#A <- alpha(phy)
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
##ppv <- kruskal.test(data = df, index ~ factor(Diet))$p.value
p4 <- ggplot(df, aes(x = Gender, y = index, color = Gender)) + geom_jitter(position=position_jitter(0.1), cex=2.0)                     + theme(legend.position="none") +
labs(y = "Shannon index", x = "Gender") #+ title = paste0 "Kruskal test p="", round(pv, 2))
#print(p4)
#A <- alpha(phy
df <- meta(phy)
df <- bind_cols(df, A)
index <- "diversity_shannon"
df$index <- df[[index]]
##ppv <- kruskal.test(data = df, index ~ factor(Diet))$p.value
p5 <- ggplot(df, aes(x = Location, y = index, color = Location)) +
geom_jitter(position=position_jitter(0.1), cex=2.0) +
theme(legend.position="none") +
labs(y = "Shannon index", x = "Location") #+ title = paste0 "Kruskal test p="", round(pv, 2))
#print(p5)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
rmarkdown::render("Alphadiversity.Rmd", "Alphadiversity.md")
rmarkdown::render("Alphadiversity.Rmd", output_format = "Alphadiversity.md")
rmarkdown::render("Alphadiversity.Rmd", output_format = md_document)
rmarkdown::render("Alphadiversity.Rmd", output_format = "md_document")
?adonis
library(microbiome)
library(phyloseq)
library(vegan)
library(knitr)
library(knitcitations)
library(microbiome)
library(ggplot2)
library(dplyr)
library(reshape2)
#library(DESeq2)
library(Cairo)
library(gridExtra)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p_adj_method <- "BH";
alpha <- 0.05
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
#PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance, p_adj_method,
alpha)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
#p_adj_method <- "BH";
#alpha <- 0.05
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
#PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
#PERMANOVA analysis for Age
pe <- adonis(t(otu_table(phy)) ~ Age,
data = meta(phy),
permutations=99,
method = distance)
print(pe)
#PERMANOVA analysis for gender
perm <- adonis(t(otu_table(phy)) ~ Gender,
data = meta(phy),
permutations=99,
method = distance)
print(perm)
#PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
print(perma)
#PERMANOVA analysis for Family
perman <- adonis(t(otu_table(phy)) ~ Family,
data = meta(phy),
permutations=99,
method = distance)
print(perman)
library(microbiome)
library(phyloseq)
library(vegan)
library(knitr)
library(knitcitations)
library(microbiome)
library(ggplot2)
library(dplyr)
library(reshape2)
#library(DESeq2)
library(Cairo)
library(gridExtra)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
theme_set(theme_bw(30))
p1 <- plot_landscape(microbiome::transform(phy, "compositional"),
distance = distance,
method = method,
size = 5,
col = "Diet",
shading = FALSE)+
scale_colour_brewer(palette = "Set1")	+ labs(title = "Diet") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
p2 <- plot_landscape(microbiome::transform(phy, "compositional"),
distance = distance,
method = method,
size = 5,
col = "Age",
shading = FALSE)+
scale_colour_brewer(palette = "Set1")	+ labs(title = "Age") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
p3 <- plot_landscape(microbiome::transform(phy, "compositional"),
distance = distance,
method = method,
size = 5,
col = "Gender",
shading = FALSE)+
scale_colour_brewer(palette = "Set1")	+ labs(title = "Gender") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
p4 <- plot_landscape(microbiome::transform(phy, "compositional"),
distance = distance,
method = method,
size = 5,
col = "Location",
shading = FALSE)+
scale_colour_brewer(palette = "Set1")	+ labs(title = "Location") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
p5 <- plot_landscape(microbiome::transform(phy, "compositional"),
distance = distance,
method = method,
size = 5,
col = "Family",
shading = FALSE)+
scale_colour_brewer(palette = "Set1")	+ labs(title = "Family") + theme(legend.position = 'bottom', legend.text=element_text(size=20), legend.title=element_text(size=25))
gridExtra::grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
#p_adj_method <- "BH";
#alpha <- 0.05
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
#PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
#PERMANOVA analysis for Age
pe <- adonis(t(otu_table(phy)) ~ Age,
data = meta(phy),
permutations=99,
method = distance)
print(pe)
#PERMANOVA analysis for gender
perm <- adonis(t(otu_table(phy)) ~ Gender,
data = meta(phy),
permutations=99,
method = distance)
print(perm)
#PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
print(perma)
#PERMANOVA analysis for Family
perman <- adonis(t(otu_table(phy)) ~ Family,
data = meta(phy),
permutations=99,
method = distance)
print(perman)
print(per)
#PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
#p_adj_method <- "BH"
#alpha <- 0.05
Per.results <- list()
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p_adj_method <- "BH"
alpha <- 0.05
Per.results <- list()
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
# PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
# PERMANOVA analysis for Age
pe <- adonis(t(otu_table(phy)) ~ Age,
data = meta(phy),
permutations=99,
method = distance)
print(pe)
print(pe)
# PERMANOVA analysis for gender
perm <- adonis(t(otu_table(phy)) ~ Gender,
data = meta(phy),
permutations=99,
method = distance)
print(perm)
# PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
# PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
print(perma)
# PERMANOVA analysis for Family
perman <- adonis(t(otu_table(phy)) ~ Family,
data = meta(phy),
permutations=99,
method = distance)
print(perman)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p_adj_method <- "BH"
alpha <- 0.05
results <- list()
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
# PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
# PERMANOVA analysis for Age
pe <- adonis(t(otu_table(phy)) ~ Age,
data = meta(phy),
permutations=99,
method = distance)
print(pe)
# PERMANOVA analysis for gender
perm <- adonis(t(otu_table(phy)) ~ Gender,
data = meta(phy),
permutations=99,
method = distance)
print(perm)
# PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
print(perma)
# PERMANOVA analysis for Family
perman <- adonis(t(otu_table(phy)) ~ Family,
data = meta(phy),
permutations=99,
method = distance)
print(perman)
results
library(knitr)
library(knitcitations)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(dada2)
library(dplyr)
library(vegan)
library(ggpubr)
library(gridExtra)
theme_set(theme_bw(20))
# Was created with: source("create_phyloseq.R")
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
summarize_phyloseq(phy)
library(ggplot2)
library(phyloseq)
library(dada2)
library(dada2)
library(readxl)
library(dplyr)
physeq
library(ggplot2)
library(phyloseq)
library(dada2)
library(dada2)
library(readxl)
library(dplyr)
physeq
library(ape)
library(ape)
random_tree = rtree(ntaxa(phyloseq), rooted=TRUE, tip.label=taxa_names(phyloseq))
ape::write. tree(random_tree, file='famtree.nwk')
ape::write.tree(random_tree, file='famtree.nwk')
famtree <- ape::read.tree("famtree.nwk")
famtree
library(microbiome)
library(phyloseq)
library(vegan)
library(knitr)
library(knitcitations)
library(microbiome)
library(ggplot2)
library(dplyr)
library(reshape2)
#library(DESeq2)
library(Cairo)
library(gridExtra)
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
method <- "PCoA"
trans <- "compositional"
distance <- "bray"
p_adj_method <- "BH"
alpha <- 0.05
results <- list()
phy <- readRDS("inputdata/processed/phyloseq/physeq.RDS")
# PERMANOVA analysis for Diet
per <- adonis(t(otu_table(phy)) ~ Diet,
data = meta(phy),
permutations=99,
method = distance)
print(per)
# PERMANOVA analysis for Age
pe <- adonis(t(otu_table(phy)) ~ Age,
data = meta(phy),
permutations=99,
method = distance)
print(pe)
# PERMANOVA analysis for gender
perm <- adonis(t(otu_table(phy)) ~ Gender,
data = meta(phy),
permutations=99,
method = distance)
print(perm)
# PERMANOVA analysis for Geographical location
perma <- adonis(t(otu_table(phy)) ~ Location,
data = meta(phy),
permutations=99,
method = distance)
print(perma)
# PERMANOVA analysis for Family
perman <- adonis(t(otu_table(phy)) ~ Family,
data = meta(phy),
permutations=99,
method = distance)
print(perman)
library("phyloseq")
library("ggplot2")
library("cluster")
library("igraph")
library("markovchain")
library("RColorBrewer")
library(microbiome)
library("gridExtra")
library(tidyr)
library(dplyr)
set.seed(455423)
options(stringsAsFactors = FALSE)
theme_set(theme_bw())
# Init / Read data
# Was created with: source("create_phyloseq.R")
ps <- readRDS("inputdata/processed/phyloseq/phyloseq.RDS")
tt <- data.frame(tax_table(ps))
ps <- transform(ps, "compositional")
braydist <- phyloseq::distance(ps, method="bray")
ord <- ordinate(ps, method = "MDS", distance = braydist)
plot_scree(ord) + xlim(as.character(seq(1,15))) + ggtitle("MDS-bray ordination eigenvalues")
evs <- ord$value$Eigenvalues
print(evs[1:20])
print(tail(evs))
h_sub5 <- hist(evs[6:length(evs)], 100)
plot(h_sub5$mids, h_sub5$count, log="y", type='h', lwd=10, lend=2)
NDIM <- which(cumsum(evs^2/sum(evs^2)) > 0.9) - 1 # Pick components so that we reach 90% information
x <- ord$vectors[,1:NDIM]  # rows=sample, cols=MDS axes, entries = value
pamPCoA = function(x, k) {
list(cluster = pam(x[,1:2], k, cluster.only = TRUE))
}
gs <- clusGap(x, FUN = pamPCoA, K.max = 12, B = 50)
K <- 2
x <- ord$vectors[,1:NDIM]
clust <- as.factor(pam(x, k=K, cluster.only=T))
sample_data(ps)$CST <- clust
CSTs <- as.character(seq(K))
fisher.test(table(sample_data(ps)[, c("CST", "Location")]))
# Length 6 for consistency with pre-revision CST+ coloration
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)]
names(CSTColors) <- CSTs
#CSTColorScale <- scale_colour_discrete(name = "CST", values = CSTColors[1:K])
#CSTFillScale <- scale_fill_discrete(name = "CST", values = CSTColors[1:K])
ok <- ordinate(ps, method="NMDS", distance=braydist)
plot_ordination(ps, ok, color="CST") + ggtitle("NMDS -- bray -- CST")
plot_ordination(ps, ok, color="Geographical_location") + ggtitle("NMDS -- bray -- Location")
theme_set(theme_bw(base_size = 23))
library(BBmisc)
library(reshape2)
library("RColorBrewer")
library(tidyr)
set.seed(1234)
# Identify ASVs that are most different between CSTs
pvs <- c()
for (tax in taxa(ps)) {
pvs[[tax]] <- kruskal.test(abundances(ps)[tax,] ~ meta(ps)$CST)$p.value
}
pvs <- sort(unlist(pvs))
significant.taxa <- names(pvs)[which(as.numeric(p.adjust(pvs)) < 0.25)]
# Pick full names for the taxa
full.names <- apply(tax_table(ps), 1, function (x) {paste(x, collapse = "_")})
pso<- prune_taxa(significant.taxa, ps)
pso1<- microbiome::transform(pso, 'clr')
g<- otu_table(pso1)
g1<-BBmisc::normalize(g@.Data, 'standardize', range = c(0,1))
colnames(g1)<- colnames(otu_table(pso1)@.Data)
j<- otu_table(g1, taxa_are_rows = T)
otu_table(pso1)<- j
p <- list()
sort.taxa <- neatsort(pso1, "rows")
dfm <- tab <- data.frame(ASV = significant.taxa, Full_name = full.names[significant.taxa])
dfm$short_name <- dfm$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
#tab$short_names <- tab$Full_name %>% strsplit("_" ) %>% sapply(tail, 1 )
for(CST in CSTs) {
pshm <- prune_samples(sample_data(pso1)$CST == CST, pso1)
dfm <- melt(abundances(pshm))
dfm$short_name <- full.names[as.character(dfm$Var1)] %>% strsplit("_" ) %>% sapply(tail, 1 )
p[[CST]]<- heat((dfm), "Var2","short_name", "value", legend.text = "Abundance", order.rows = F,
order.cols = F, limits= c(-5,5), step = 2) +
ggtitle(paste("CST:", CST)) + theme(axis.text.x = element_blank()) +labs(x= "Individuals")
print(p[[CST]])
}
rmarkdown::render("CST.md")
rmarkdown::render("CST.Rmd", "CST.md")
rmarkdown::render("CST.Rmd", output_format = "CST.md")
rmarkdown::render("CST.Rmd")
markdown::render("CST.Rmd", output_format="md_document")
Rmarkdown::render("CST.Rmd", output_format="md_document")
rmarkdown::render("CST.Rmd", output_format="md_document")
