# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Family"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Family"),
fill = guide_legend("Family"),
group = guide_legend("Family"),
shape = guide_legend("Family"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
plot
library(mia)
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
# Load ggord for plotting
#if(!require("ggord")){
#    if(!require("devtools")){
#        install.packages("devtools")
#        library("devtools")
#    }
#    install_github("https://github.com/fawda123/ggord/")
#    library("ggord")
#}
#if(!require("ggplot2")){
#    install.packages("ggplot2")
#    library("ggplot2")
#}
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Location"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Location"),
fill = guide_legend("Location"),
group = guide_legend("Location"),
shape = guide_legend("Location"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
library(knitr)
library(mia)
library(vegan)
library(knitr)
library(stringr)
# Load data
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
#data(enterotype, package="mia")
# Covariates that are being analyzed
variable_names <- c("Location", "Diet", "Sex", "Age")
# Apply relative transform
tse <- transformCounts(fam_tse, method = "relabundance")
# Create a formula
formula <- as.formula(paste0("assay ~ ", str_c(variable_names, collapse = " + ")) )
# # Perform RDA
rda <- calculateRDA(tse, assay_name = "relabundance",
formula = formula, distance = "bray", na.action = na.exclude)
# Get the rda object
rda <- attr(rda, "rda")
# Calculate p-value and variance for whole model
# Recommendation: use 999 permutations instead of 99
set.seed(436)
permanova <- anova.cca(rda, permutations = 99)
# Create a data.frame for results
rda_info <- as.data.frame(permanova)["Model", ]
# Calculate p-value and variance for each variable
# by = "margin" --> the order or variables does not matter
set.seed(4585)
permanova <- anova.cca(rda, by = "margin",  permutations = 99)
# Add results to data.frame
rda_info <- rbind(rda_info, permanova)
# Add info about total variance
rda_info[ , "Total variance"] <- rda_info["Model", 2] +
rda_info["Residual", 2]
# Add info about explained variance
rda_info[ , "Explained variance"] <- rda_info[ , 2] /
rda_info[ , "Total variance"]
# Loop through variables, calculate homogeneity
homogeneity <- list()
# Get colDtaa
coldata <- colData(tse)
# Get assay
assay <- t(assay(tse, "relabundance"))
for( variable_name in rownames(rda_info) ){
# If data is continuous or discrete
if( variable_name %in% c("Model", "Residual") ||
length(unique(coldata[[variable_name]])) /
length(coldata[[variable_name]]) > 0.2 ){
# Do not calculate homogeneity for continuous data
temp <- NA
} else{
# Calculate homogeneity for discrete data
# Calculate homogeneity
set.seed(413)
temp <- anova(
betadisper(
vegdist(assay, method = "bray"),
group = coldata[[variable_name]] ),
permutations = permutations )["Groups", "Pr(>F)"]
}
# Add info to the list
homogeneity[[variable_name]] <- temp
}
# Add homogeneity to information
rda_info[["Homogeneity p-value (NULL hyp: distinct/homogeneous --> permanova suitable)"]] <-
homogeneity
kable(rda_info)
library("devtools")
library("ggord")
# Load ggord for plotting
#if(!require("ggord")){
#    if(!require("devtools")){
#        install.packages("devtools")
#        library("devtools")
#    }
#    install_github("https://github.com/fawda123/ggord/")
#    library("ggord")
#}
#if(!require("ggplot2")){
#    install.packages("ggplot2")
#    library("ggplot2")
#}
library(ggplot2)
library(ggord)
# Since na.exclude was used, if there were rows missing information, they were
# dropped off. Subset coldata so that it matches with rda.
coldata <- coldata[ rownames(rda$CCA$wa), ]
# Adjust names
# Get labels of vectors
vec_lab_old <- rownames(rda$CCA$biplot)
library(rlang)
# Loop through vector labels
vec_lab <- sapply(vec_lab_old, FUN = function(name){
# Get the variable name
variable_name <- variable_names[ str_detect(name, variable_names) ]
# If the vector label includes also group name
if( !any(name %in% variable_names) ){
# Get the group names
group_name <- unique( coldata[[variable_name]] )[
which( paste0(variable_name, unique( coldata[[variable_name]] )) == name ) ]
# Modify vector so that group is separated from variable name
new_name <- paste0(variable_name, " \U2012 ", group_name)
} else{
new_name <- name
}
# Add percentage how much this variable explains, and p-value
new_name <- expr(paste(!!new_name, " (",
!!format(round( rda_info[variable_name, "Explained variance"]*100, 1), nsmall = 1),
"%, ",italic("P"), " = ",
!!gsub("0\\.","\\.", format(round( rda_info[variable_name, "Pr(>F)"], 3),
nsmall = 3)), ")"))
return(new_name)
})
# Add names
names(vec_lab) <- vec_lab_old
# Create labels for axis
xlab <- paste0("RDA1 (", format(round( rda$CCA$eig[[1]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
ylab <- paste0("RDA2 (", format(round( rda$CCA$eig[[2]]/rda$CCA$tot.chi*100, 1), nsmall = 1 ), "%)")
# Create a plot
plot <- ggord(rda, grp_in = coldata[["Location"]], vec_lab = vec_lab,
alpha = 0.5,
size = 4, addsize = -4,
#ext= 0.7,
txt = 3.5, repel = TRUE,
#coord_fix = FALSE
) +
# Adjust titles and labels
guides(colour = guide_legend("Location"),
fill = guide_legend("Location"),
group = guide_legend("Location"),
shape = guide_legend("Location"),
x = guide_axis(xlab),
y = guide_axis(ylab)) +
theme( axis.title = element_text(size = 10) )
plot
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
library(mia)
library(vegan)
library(ggplot2)
library(scater)
library(ggrepel)
library(gridExtra)
library(vegan)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Quantify dissimilarities in the original feature space
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
#library(scater)
tse <- transformSamples(tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for location
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "B. Location") +
theme(legend.position = 'none', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "A. Family") + theme(legend.position = 'none', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15)) + theme(legend.box.spacing = unit(5, "pt"), legend.margin=margin(10,10,10,10)) #+labs(tag = "A")
library(gridExtra)
library(ggpubr)
gridExtra::grid.arrange(p4, p, ncol = 2, widths=c(0.5, 0.5), heights = c(10, 4))
#ggarrange(p4, p, p1, widths = c(1.5,2))
grid.arrange(p4, arrangeGrob(p, p1), ncol = 2, widths=c(0.5, 0.3), heights = c(6, 4))
#grid.arrange(p4, arrangeGrob(p, p1), ncol = 2, widths=c(1, 0.7), heights = c(7, 5))
#grid.arrange(p4, arrangeGrob(p, p1), ncol = 2, widths=c(1.8, 1.2), heights = c(7, 5))
#grid.arrange(p4, arrangeGrob(p, p1), ncol = 2)
#grid.arrange(p4, arrangeGrob(p, p1), ncol = 2, widths=c(1.8, 1.5), heights = c(0.2, 2.5))
gridExtra::grid.arrange(p4, p, nrow = 2)
#library(gridExtra)
#gridExtra::grid.arrange(p, p1, p2, p3, p4, nrow = 2)
## PERMANOVA analysis
#library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 999 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Sex,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformCounts(fam_tse, method = "relabundance")
# Quantify dissimilarities in the original feature space
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
#library(scater)
tse <- transformSamples(tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for location
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "B. Location") +
theme(legend.position = 'none', legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Create ggplot object for Family
p4 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Family", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p4 <- p4 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "A. Family") + theme(legend.position = 'none', legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15)) + theme(legend.box.spacing = unit(5, "pt"), legend.margin=margin(10,10,10,10)) #+labs(tag = "A")
library(gridExtra)
library(ggpubr)
gridExtra::grid.arrange(p4, p, ncol = 2, widths=c(0.5, 0.5), heights = c(10, 4))
gridExtra::grid.arrange(p4, p, nrow = 2)
## PERMANOVA analysis
#library("vegan")
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- transformSamples(fam_tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Location"]))
set.seed(1576)
# We choose 999 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Location + Diet + Age + Family + Sex,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
rmarkdown::render("tse_beta.Rmd", output_format="md_document")
