library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Family, ~t,	~Members,	~c, ~G1,	~G2, ~G3, ~b, ~Vegetarian,	~Mixed, ~bl, ~Male,  ~Female, ~bla,	~Pune, ~Ahmednagar, ~blan, ~Adult, ~Middleage, ~Elderly,
"A",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   0, 5,   NA,  1, 2, 2,
"B",  NA, 3, NA,  1, 1, 1,  NA, 3, 0, NA,  2,  1,   NA,   0, 3,  NA,   1, 1, 1,
"C", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
â€‹
library(pacman)
p_load(flextable, dplyr, officer)
library(data.table)
df <- tibble::tribble(
~Family, ~t,	~Members,	~c, ~G1,	~G2, ~G3, ~b, ~Vegetarian,	~Mixed, ~bl, ~Male,  ~Female, ~bla,	~Pune, ~Ahmednagar, ~blan, ~Adult, ~Middleage, ~Elderly,
"A",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   0, 5,   NA,  1, 2, 2,
"B",  NA, 3, NA,  1, 1, 1,  NA, 3, 0, NA,  2,  1,   NA,   0, 3,  NA,   1, 1, 1,
"C", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1,
"D", NA, 3, NA,  1, 1, 1, NA, 3, 0, NA,   0,  3,  NA,    0, 3,    NA,  1, 1, 1,
"E",  NA, 4,  NA, 1, 2,  1, NA, 0, 4,  NA,  2, 2,   NA,   0, 4,   NA,  2, 1, 1,
"F",  NA, 5,  NA, 1, 2,  2, NA, 1, 4,  NA,  2, 3,   NA,   5, 0,   NA,  1, 2, 2,
"G", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   3,  2,  NA,    5, 0,    NA,  2, 2, 1,
"H", NA,  5, NA,  2, 2, 1, NA, 5, 0, NA,   2,  3,  NA,    5, 0,    NA,  2, 2, 1,
"I", NA,  6, NA,  2, 2, 2, NA, 6, 0, NA,   3,  3,  NA,    6, 0,    NA,  2, 2, 2,
"J", NA,  5, NA,  2, 2, 1, NA, 0, 5, NA,   2,  3,  NA,    5, 0,    NA,  2, 2, 1,
"K", NA,  5, NA,  1, 2, 2, NA, 5, 0, NA,   3,  2,  NA,    0, 5,    NA,  2, 1, 2,
"L",  NA, 4,  NA, 1, 2,  1, NA, 4, 0,  NA,  2, 2,   NA,   4, 0,   NA,  1, 2, 1,
"M",  NA, 5,  NA, 1, 2,  2, NA, 5, 0,  NA,  2, 3,   NA,   5, 0,   NA,  1, 2, 2,
"N",  NA, 5,  NA, 1, 2,  2, NA, 3, 2,  NA,  1, 4,   NA,   5, 0,   NA,  1, 2, 2,
"0",  NA, 7,  NA, 4, 2,  1, NA, 7, 0,  NA,  4, 3,   NA,   7, 0,   NA,  4, 2, 1
)
ft <- flextable(df)
ft <- delete_part(x = ft, part = "header")
ft <- add_header_row(
ft,
values = c(
"(n=15)", "",	"(n=72)",	 "", "(n=32)",	"(n=28)", "(n=21)", "", "(n=57)",	"(n=15)", "", "(n=33)",  "(n=39)", "",	"(n=52)", "(n=20)", "", "(n=25)", "(n=26)", "(n=21)"),
top = TRUE
)
ft <- add_header_row(
ft,
values = c(
"",	"",	"", "", "G1",	"G2", "G3", "", "Vegetarian",	"Mixed", "", "Male",  "Female", "",	"Pune", "Ahmednagar", "", "Adult", "Middle age", "Elderly"),
top = TRUE
)
# Add the second row of the multilevel header
ft <- add_header_row(ft, values = c("Family", "", "Members", "", "Generation", "", "Diet", "", "Sex", "", "Location", "", "Age"),
colwidths = c(1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 2, 1, 3), top = TRUE)
ft
ft <- theme_booktabs(ft, bold_header = TRUE)
ft <- align(ft, part = "all", i = NULL, j = NULL, align = "center")
# Add custom borders under multi-level headers
# First define define the style of the border line
border_style = officer::fp_border(color="black", width= 1)
ft <- hline(ft, part="header", i = 2, j = c(5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
ft <- hline(ft, part="header", i = 1, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
########final
ft <- padding(ft, padding.top = 2, part = "body")
ft <- fontsize(ft, size = 11, part = "header")
ft <- hline(ft, part="header", i = 1, j = c(5, 9, 12, 15, 18), border = border_style)
##ft <- hline(ft, part="header", i = 2, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
#ft <- hline(ft, part="header", i = 2, j = c(1:3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
#ft <- hline(ft, part="header", i = 1, j = c(1, 3, 5:7, 9:10, 12:13, 15:16, 18:20), border = border_style)
ft
rmarkdown::render("Intergeneration_analysis.Rmd", output_format="md_document")
rmarkdown::render("location.Rmd", output_format="md_document")
rmarkdown::render("Tables.Rmd", output_format="md_document")
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_tax <- getTopTaxa(tse_Phylum,top =3, detection = 0.1/100, prevalence= 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_tax) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
###################################################
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
#gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 3, assay_name = "relabundance")
#phylum_renamed <- lapply(rowData(tse)$Phylum,
#                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
library(dplyr)
library(ComplexHeatmap)
sorted_coldata <- as.data.frame(colData(tse_Phylum)) %>%
arrange(Location)
sorted_assay <- assay(tse_Phylum, "clr_z")[ , rownames(sorted_coldata)]
#sorted_assay <- assay(tse_Phylum, "clr_z")[ , sorted_coldata$Location]
ren <- HeatmapAnnotation(
Location = sorted_coldata$Location)
sub_assay <- sorted_assay[top_taxa, ]
hm <- Heatmap(sub_assay,
name = "clr-z",
column_split = sorted_coldata$Location,
column_gap = unit(2, "mm"),
border = TRUE,
column_title = "",
row_names_side = "left",
top_annotation = ren,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_names = FALSE)
gridExtra::grid.arrange(l, hm, nrow = 1)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 4, assay_name = "relabundance")
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
maxval <- round(max(abs(df$clr_z)))
limits <- c(-6, 6)
breaks <- c(-6, -3, 0, 3, 6)
colours <- c("darkblue", "blue", "white", "red", "darkred")
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks =c(-6, -3, 0, 3, 6), limits= c(-6, 6), colours = colours) +
theme(text = element_text(size=15),
#axis.text.x = element_text(angle=45, hjust=1),
axis.text.x=element_blank(),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Phylum")
print(c)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top =4, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phylum_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 4, assay_name = "relabundance")
phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
df <- meltAssay(tse_Phylum, assay_name = "clr_z")
maxval <- round(max(abs(df$clr_z)))
limits <- c(-6, 6)
breaks <- c(-6, -3, 0, 3, 6)
colours <- c("darkblue", "blue", "white", "red", "darkred")
c <- ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) +
geom_tile() +
scale_fill_gradientn(name = "CLR + Z transform",
breaks =c(-6, -3, 0, 3, 6), limits= c(-6, 6), colours = colours) +
theme(text = element_text(size=15),
#axis.text.x = element_text(angle=45, hjust=1),
axis.text.x=element_blank(),
legend.key.size = unit(1, "cm")) +
labs(x = "Samples", y = "Phylum")
print(c)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "C. Pune")
#print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
#print(b)
c <- b+a
print(c)
rmarkdown::render("tse_core.Rmd", output_format="md_document")
library(vegan)
library(mia)
library(vegan)
library(scater)
library(dplyr)
library(tidyverse)
library(ggsignif)
tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
# Agglomerate data to Genus level
tse <- transformCounts(fam_tse, method = "relabundance")
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(1576)
# We choose 99 random permutations. Consider applying more (999 or 9999) in your
# analysis.
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Family,
by = "margin", # each term (here only 'Group') analyzed individually
data = colData(tse),
method = "euclidean",
permutations = 99)
# Set seed for reproducibility
set.seed(1576)
# Perform dbRDA
dbrda <- dbrda(t(assay(tse,"relabundance")) ~ Family,
data = colData(tse))
# Perform permutational analysis
permanova2 <- anova.cca(dbrda,
by = "margin", # each term (here only 'Group') analyzed individually
method = "euclidean",
permutations = 99)
# Get p-values
p_values <- c( permanova["Family", "Pr(>F)"], permanova2["Family", "Pr(>F)"] )
p_values <-as.data.frame(p_values)
rownames(p_values) <- c("adonis2", "dbRDA+anova.cca")
p_values
sppscores(dbrda) <- t(assay(tse,"relabundance"))
# Get coefficients
coef <- dbrda$CCA$v
# Get the taxa with biggest weights
top.coef <- head(coef[rev(order(abs(coef))), , drop = FALSE], 20)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_tax <- getTopTaxa(tse_Phylum,top =3, detection = 0.1/100, prevalence= 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_tax) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
###################################################
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
#gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(ggplot2)
library(miaViz)
library(mia)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top = 3, assay_name = "relabundance")
#phylum_renamed <- lapply(rowData(tse)$Phylum,
#                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
# Add clr-transformation on samples
assay(tse_Phylum, "pseudo") <- assay(tse_Phylum, "counts") + 1
tse_Phylum <- transformCounts(tse_Phylum, assay_name = "pseudo",
method = "relabundance")
tse_Phylum <- transformCounts(tse_Phylum,
assay_name = "relabundance",
method = "clr")
tse_Phylum <- transformFeatures(tse_Phylum, assay_name = "clr",
method = "z", name = "clr_z")
library(dplyr)
library(ComplexHeatmap)
sorted_coldata <- as.data.frame(colData(tse_Phylum)) %>%
arrange(Location)
sorted_assay <- assay(tse_Phylum, "clr_z")[ , rownames(sorted_coldata)]
#sorted_assay <- assay(tse_Phylum, "clr_z")[ , sorted_coldata$Location]
ren <- HeatmapAnnotation(
Location = sorted_coldata$Location)
sub_assay <- sorted_assay[top_taxa, ]
hm <- Heatmap(sub_assay,
name = "clr-z",
column_split = sorted_coldata$Location,
column_gap = unit(2, "mm"),
border = TRUE,
column_title = "",
row_names_side = "left",
top_annotation = ren,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_names = FALSE)
gridExtra::grid.arrange(l, hm, nrow = 1)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top =4, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
Phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phylum_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
#tseA <- merged1 %>%filter (colData(merged1)$Location == "Pune")
#tse_subset <- merged1[ , (colData(merged1)$Location %in% "Pune"]
tse_subsetPune <- merged1[ , merged1$Location %in% "Pune"]
a <- plotAbundance(tse_subsetPune, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Families", y = "Relative abundance (%)", title = "A. Pune")
print(a)
tse_subsetAhmednagar <- merged1[ , merged1$Location %in% "Ahmednagar"]
b <- plotAbundance(tse_subsetAhmednagar, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE) + labs(x = "Families", y = "", title = "B. Ahmednagar") + theme(axis.text.y=element_blank())
print(b)
library(patchwork)
#l <- a+b
a+b + plot_layout(guides = "collect")
gridExtra::grid.arrange(a, b, nrow = 1, common.legend = TRUE)
library(mia)
library(miaViz)
library(dplyr)
fam_tse <- readRDS("inputdata/processed/TSE/fam_tse.rds")
tse <- relAbundanceCounts(fam_tse)
tse_Phylum <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phylum,top =4, detection = 0.1/100, method = "prevalence", assay_name = "relabundance")
top_taxa
Phylum_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phylum_renamed)
#a <- plotAbundance(tse, assay_name="relabundance", rank = "Genus",
#              order_rank_by="abund",
#              order_sample_by = "Staphylococcus")
merged <- mergeCols(tse, colData(tse)$Family)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
ttse_list <- splitOn(merged1, f= "Location")
ttse_Ahmednagar <- ttse_list[[1]]
ttse_Pune <- ttse_list[[2]]
